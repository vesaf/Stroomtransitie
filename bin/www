#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hackathon:server');
var http = require('http');

var Gpio = require('pigpio').Gpio;

var  ports = [19, 6, 5, 13, 26];
gpioButtons = {19: {}, 6: {}, 5: {}, 13: {}, 26: {}};
var timeOutId;

for (var i = 0; i < Object.keys(gpioButtons).length; i++) {
  var portNo = Object.keys(gpioButtons)[i];
  gpioButtons[portNo]["object"] = new Gpio(portNo, {
    mode: Gpio.INPUT,
    pullUpDown: Gpio.PUD_UP,
    edge: Gpio.EITHER_EDGE
  });
  gpioButtons[portNo]["object"].on('interrupt', function (level) {
    var btnState = level;
    var portNo = this.gpio;
    clearTimeout(gpioButtons[portNo]["timeOutId"]);
    gpioButtons[portNo]["timeOutId"] = setTimeout(btnPressed, 50, btnState, portNo);
  });
}

// var gpioButton26 = new Gpio(26, {
//   mode: Gpio.INPUT,
//   pullUpDown: Gpio.PUD_UP,
//   edge: Gpio.EITHER_EDGE
// });

// gpioButton26.on('interrupt', function (level) {
//   var btnState = level;
//   clearTimeout(timeOutId);
//   timeOutId = setTimeout(btnPressed, 10, btnState);
// });

function btnPressed(btnState, portNo) {
  // read button state, 
  var level = gpioButtons[portNo]["object"].digitalRead(portNo)
  if (btnState === level) {
      console.log('buttonState' + portNo + ': ' + level);
  }
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
